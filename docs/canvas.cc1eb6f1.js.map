{"version":3,"sources":["ts/canvas.ts"],"names":[],"mappings":"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","file":"canvas.cc1eb6f1.js","sourceRoot":"../src/canvas-resize","sourcesContent":["const canvasEl: HTMLCanvasElement = document.querySelector('#cvs')\n\nconst resizeCanvas = () => {\n  canvasEl.width = window.innerWidth\n  canvasEl.height = window.innerHeight\n}\n\nresizeCanvas()\n\nconst context = canvasEl.getContext('2d')\n\nconst originCoordinates = {\n  x: canvasEl.width / 2,\n  y: canvasEl.height / 2,\n}\n\nconst axisColor = '#333'\n\nconst renderAxis = () => {\n  return (xStart: number, yStart: number, x: number, y: number) => {\n    context.beginPath() // 开始绘制\n    context.moveTo(xStart, yStart) // 起点\n    context.lineTo(x, y) // 终点\n    context.strokeStyle = axisColor // 指定填充颜色\n    context.stroke() // 填充\n  }\n}\n\nconst initialState = {\n  distance: 5,\n  coefficient: 1,\n}\n\nconst xScale = {\n  width: initialState.distance,\n  height: 5,\n}\n\nconst yScale = {\n  height: initialState.distance,\n  width: 5,\n}\n\nconst renderSingleXScale = (x: number) => {\n  context.beginPath() // 开始绘制\n  context.moveTo(x, originCoordinates.y) // 起点\n  context.lineTo(x, originCoordinates.y - xScale.height) // 终点\n  context.strokeStyle = axisColor // 指定填充颜色\n  context.stroke() // 填充\n}\n\nconst renderSingleYScale = (y: number) => {\n  context.beginPath() // 开始绘制\n  context.moveTo(originCoordinates.x, y) // 起点\n  context.lineTo(originCoordinates.x + yScale.width, y) // 终点\n  context.strokeStyle = axisColor // 指定填充颜色\n  context.stroke() // 填充\n}\n\nconst renderXScale = () => {\n  const positiveXScalesNumber = Math.floor(\n    (canvasEl.width - originCoordinates.x) / xScale.width\n  )\n  const positiveXScales = new Array(positiveXScalesNumber).fill(null)\n  positiveXScales.forEach((_, index) => {\n    if (index !== 0) {\n      renderSingleXScale(originCoordinates.x + index * xScale.width) // x轴正数\n    }\n  })\n  const negativeXScalesNumber = Math.floor(originCoordinates.x / xScale.width)\n  const negativeXScales = new Array(negativeXScalesNumber).fill(null)\n  negativeXScales.forEach((_, index) => {\n    if (index !== 0) {\n      renderSingleXScale(originCoordinates.x - index * xScale.width)\n    }\n  })\n}\n\nconst renderYScale = () => {\n  const positiveYScaleNumber = Math.floor(\n    (canvasEl.height - originCoordinates.y) / yScale.height\n  )\n  const positiveYScales = new Array(positiveYScaleNumber).fill(null)\n  positiveYScales.forEach((_, index) => {\n    if (index !== 0) {\n      renderSingleYScale(originCoordinates.y + index * yScale.height)\n    }\n  })\n  const negativeYScaleNumber = Math.floor(originCoordinates.y / yScale.height)\n  const negativeYScales = new Array(negativeYScaleNumber).fill(null)\n  negativeYScales.forEach((_, index) => {\n    if (index !== 0) {\n      renderSingleYScale(originCoordinates.y - index * yScale.height)\n    }\n  })\n}\n\nconst render = () => {\n  // 绘制x轴\n  renderAxis()(0, originCoordinates.y, canvasEl.width, originCoordinates.y)\n  // 绘制y轴\n  renderAxis()(originCoordinates.x, 0, originCoordinates.x, canvasEl.height)\n  renderXScale()\n  renderYScale()\n}\n\nconst distance = 30\n\nconst drag = {\n  isMouseDown: false,\n  canMove: false,\n  handleMouseDown() {\n    canvasEl.addEventListener('mousedown', (e) => {\n      drag.isMouseDown = true\n      const xDistance = Math.abs(originCoordinates.x - e.clientX)\n      const yDistance = Math.abs(originCoordinates.y - e.clientY)\n\n      if (xDistance - distance < 0 || yDistance - distance < 0) {\n        drag.canMove = true\n      } else {\n        drag.canMove = false\n      }\n    })\n  },\n  handleMouseMove() {\n    canvasEl.addEventListener('mousemove', (e) => {\n      if (!drag.isMouseDown) return\n      if (!drag.canMove) return\n\n      originCoordinates.x = e.clientX\n      originCoordinates.y = e.clientY\n\n      draw.renderShape()\n    })\n  },\n  handleMouseUp() {\n    canvasEl.addEventListener('mouseup', (e) => {\n      drag.isMouseDown = false\n    })\n  },\n  init() {\n    drag.handleMouseDown()\n    drag.handleMouseMove()\n    drag.handleMouseUp()\n  },\n}\n\nconst zoom = {\n  handleMouseWheel() {\n    canvasEl.addEventListener('mousewheel', (e: WheelEvent) => {\n      console.log(e.deltaY)\n      const step = e.deltaY\n      initialState.coefficient += step\n      if (initialState.coefficient <= 0.5) {\n        initialState.coefficient = 0.5\n      }\n      if (initialState.coefficient >= 20) {\n        initialState.coefficient = 20\n      }\n      console.log(initialState.coefficient)\n      xScale.width = initialState.coefficient * initialState.distance\n      yScale.height = initialState.coefficient * initialState.distance\n\n      draw.renderShape()\n    })\n  },\n  init() {\n    zoom.handleMouseWheel()\n  },\n}\n\nconst coordinateInfo = {\n  coordinate: {\n    x: 0,\n    y: 0,\n  },\n  handleMouseMove() {\n    const pEl = document.querySelector('#coordinate')\n    canvasEl.addEventListener('mousemove', (e) => {\n      const xCoordinate = (e.clientX - originCoordinates.x) / xScale.width\n      const yCoordinate = (originCoordinates.y - e.clientY) / yScale.height\n      coordinateInfo.coordinate.x = xCoordinate\n      coordinateInfo.coordinate.y = yCoordinate\n      pEl.textContent = `x:${xCoordinate},y:${yCoordinate}`\n    })\n  },\n  init() {\n    coordinateInfo.handleMouseMove()\n  },\n}\n\nconst draw = {\n  isDrawing: false,\n  coordinates: [],\n  handleButtonClick() {\n    const buttonEl = document.querySelector('#draw')\n\n    buttonEl.addEventListener('click', (e) => {\n      if (!draw.isDrawing) {\n        drag.canMove = false\n        draw.isDrawing = true\n        buttonEl.textContent = '停止绘制'\n        return\n      }\n\n      drag.canMove = true\n      draw.isDrawing = false\n      buttonEl.textContent = '开始绘制'\n    })\n  },\n  drawShape() {\n    canvasEl.addEventListener('click', (e) => {\n      if (!draw.isDrawing) return\n      draw.coordinates.push({\n        x: coordinateInfo.coordinate.x,\n        y: coordinateInfo.coordinate.y,\n        originX: e.clientX,\n        originY: e.clientY,\n      })\n      console.log(draw.coordinates)\n      draw.renderShape()\n    })\n  },\n  renderShape() {\n    context.clearRect(0, 0, innerWidth, innerHeight)\n    render()\n    draw.coordinates.forEach((coordinate, index) => {\n      if (index === 0) {\n        context.moveTo(\n          transformXCoordinate(coordinate.x),\n          transformYCoordinate(coordinate.y)\n        ) // 起点\n      }\n      context.lineTo(\n        transformXCoordinate(coordinate.x),\n        transformYCoordinate(coordinate.y)\n      ) // 终点\n    })\n    context.strokeStyle = axisColor // 指定填充颜色\n    context.stroke() // 填\n  },\n  init() {\n    draw.handleButtonClick()\n    draw.drawShape()\n  },\n}\n\nconst transformXCoordinate = (x: number) =>\n  x * initialState.distance * initialState.coefficient + originCoordinates.x\nconst transformYCoordinate = (y: number) =>\n  originCoordinates.y - y * initialState.distance * initialState.coefficient\n\ndrag.init()\nzoom.init()\ncoordinateInfo.init()\ndraw.init()\n\nrender()\n"]}